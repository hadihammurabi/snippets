{
	// Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Create CRUD Repository": {
		"prefix": "rc",
		"body": [
			"// $1Repository repository contract",
			"type $1Repository interface {",
			"\tAll() ([]*model.$1, error)",
			"\tCreate(*model.$1) (*model.$1, error)",
			"\tFindByID(uuid.UUID) (*model.$1, error)",
			"\tUpdateByID(uuid.UUID, *model.$1) (*model.$1, error)",
			"\tDeleteByID(uuid.UUID) (*model.$1, error)",
			"}",
			"// $3RepoImpl repository contract",
			"type $3RepoImpl struct {",
			"\tdb *gorm.DB",
			"}",
			"func New$1Repository(ioc di.Container) $1Repository {",
			"\tdatabase := getDatabase(ioc)",
			"\treturn &$3RepoImpl{",
			"\t\tdb: database,",
			"\t}",
			"}",
			"func (r $3RepoImpl) All() ([]*model.$1, error) {",
			"\tdata := make([]*model.$1, 0)",
			"\terr := r.db.Find(&data).Error",
			"\treturn data, err",
			"}",
			"func (r $3RepoImpl) Create(input *model.$1) (*model.$1, error) {",
			"\terr := r.db.Create(&input).Error",
			"\treturn input, err",
			"}",
			"func (r $3RepoImpl) FindByID(id uuid.UUID) (*model.$1, error) {",
			"\tdata := new(model.$1)",
			"\terr := r.db.Where(model.$1{ID: id}).Find(&data).Error",
			"\treturn data, err",
			"}",
			"func (r $3RepoImpl) UpdateByID(id uuid.UUID, input *model.$1) (*model.$1, error) {",
			"\terr := r.db.Where(model.$1{ID: id}).Updates(&input).Error",
			"\treturn input, err",
			"}",
			"func (r $3RepoImpl) DeleteByID(id uuid.UUID) (*model.$1, error) {",
			"\ttx := r.db.Begin()",
			"\tdata := new(model.$1)",
			"\ttx.Where(model.$1{ID: id}).Find(&data)",
			"\terr := tx.Delete(model.$1{ID: id}).Error",
			"\tif err != nil {",
			"\t\ttx.Rollback()",
			"\t\treturn nil, err",
			"\t}",
			"",
			"\ttx.Commit()",
			"\treturn data, err",
			"}",
		],
		"description": "Create CRUD Repository"
	},
	"Create CRUD Repository With Context": {
		"prefix": "rcc",
		"body": [
			"// $1Repository repository contract",
			"type $1Repository interface {",
			"\tAll(context.Context) ([]*model.$1, error)",
			"\tCreate(context.Context, *model.$1) (*model.$1, error)",
			"\tFindByID(context.Context, uuid.UUID) (*model.$1, error)",
			"\tUpdateByID(context.Context, uuid.UUID, *model.$1) (*model.$1, error)",
			"\tDeleteByID(context.Context, uuid.UUID) (*model.$1, error)",
			"}",
			"// $3RepoImpl repository contract",
			"type $3RepoImpl struct {",
			"\tdb *gorm.DB",
			"}",
			"func New$1Repository(ioc di.Container) $1Repository {",
			"\tdatabase := getDatabase(ioc)",
			"\treturn &$3RepoImpl{",
			"\t\tdb: database,",
			"\t}",
			"}",
			"func (r $3RepoImpl) All(ctx context.Context) ([]*model.$1, error) {",
			"\tdata := make([]*model.$1, 0)",
			"\terr := r.db.WithContext(ctx).Find(&data).Error",
			"\treturn data, err",
			"}",
			"func (r $3RepoImpl) Create(ctx context.Context, input *model.$1) (*model.$1, error) {",
			"\terr := r.db.WithContext(ctx).Create(&input).Error",
			"\treturn input, err",
			"}",
			"func (r $3RepoImpl) FindByID(ctx context.Context, id uuid.UUID) (*model.$1, error) {",
			"\tdata := new(model.$1)",
			"\terr := r.db.WithContext(ctx).Where(model.$1{ID: id}).Find(&data).Error",
			"\treturn data, err",
			"}",
			"func (r $3RepoImpl) UpdateByID(ctx context.Context, id uuid.UUID, input *model.$1) (*model.$1, error) {",
			"\terr := r.db.WithContext(ctx).Where(model.$1{ID: id}).Updates(&input).Error",
			"\treturn input, err",
			"}",
			"func (r $3RepoImpl) DeleteByID(ctx context.Context, id uuid.UUID) (*model.$1, error) {",
			"\ttx := r.db.WithContext(ctx).Begin()",
			"\tdata := new(model.$1)",
			"\ttx.WithContext(ctx).Where(model.$1{ID: id}).Find(&data)",
			"\terr := tx.WithContext(ctx).Delete(model.$1{ID: id}).Error",
			"\tif err != nil {",
			"\t\ttx.WithContext(ctx).Rollback()",
			"\t\treturn nil, err",
			"\t}",
			"",
			"\ttx.WithContext(ctx).Commit()",
			"\treturn data, err",
			"}",
		],
		"description": "Create CRUD Repository With Context"
	},
	"Create CRUD Repository With Context and Transaction": {
		"prefix": "rcct",
		"body": [
	"// $1Repository repository contract",
	"type $1Repository interface {",
	"\tNewTx(context.Context) *gorm.DB",
	"\tAll(context.Context) ([]*model.$1, error)",
	"\tAllWithTx(context.Context, *gorm.DB) ([]*model.$1, error)",
	"\tCreate(context.Context, *model.$1) (*model.$1, error)",
	"\tCreateWithTx(context.Context, *gorm.DB, *model.$1) (*model.$1, error)",
	"\tFindByID(context.Context, uuid.UUID) (*model.$1, error)",
	"\tFindByIDWithTx(context.Context, *gorm.DB, uuid.UUID) (*model.$1, error)",
	"\tUpdateByID(context.Context, uuid.UUID, *model.$1) (*model.$1, error)",
	"\tUpdateByIDWithTx(context.Context, *gorm.DB, uuid.UUID, *model.$1) (*model.$1, error)",
	"\tDeleteByID(context.Context, uuid.UUID) (*model.$1, error)",
	"\tDeleteByIDWithTx(context.Context, *gorm.DB, uuid.UUID) (*model.$1, error)",
	"}",
	"",
	"// $2RepoImpl repository contract",
	"type $2RepoImpl struct {",
	"\tdb *gorm.DB",
	"}",
	"",
	"func New$1Repository(ioc di.Container) $1Repository {",
	"\tdatabase := getDatabase(ioc)",
	"\treturn &$2RepoImpl{",
	"\t\tdb: database,",
	"\t}",
	"}",
	"",
	"func (r $2RepoImpl) NewTx(ctx context.Context) *gorm.DB {",
	"\treturn r.db.WithContext(ctx).Begin()",
	"}",
	"",
	"func (r $2RepoImpl) AllWithTx(ctx context.Context, tx *gorm.DB) ([]*model.$1, error) {",
	"\tdata := make([]*model.$1, 0)",
	"\terr := tx.WithContext(ctx).Find(&data).Error",
	"\treturn data, err",
	"}",
	"func (r $2RepoImpl) All(ctx context.Context) ([]*model.$1, error) {",
	"\tdata := make([]*model.$1, 0)",
	"\terr := r.db.WithContext(ctx).Find(&data).Error",
	"\treturn data, err",
	"}",
	"",
	"func (r $2RepoImpl) CreateWithTx(ctx context.Context, tx *gorm.DB, input *model.$1) (*model.$1, error) {",
	"\terr := tx.WithContext(ctx).Create(&input).Error",
	"\treturn input, err",
	"}",
	"func (r $2RepoImpl) Create(ctx context.Context, input *model.$1) (*model.$1, error) {",
	"\terr := r.db.WithContext(ctx).Create(&input).Error",
	"\treturn input, err",
	"}",
	"",
	"func (r $2RepoImpl) FindByIDWithTx(ctx context.Context, tx *gorm.DB, id uuid.UUID) (*model.$1, error) {",
	"\tdata := new(model.$1)",
	"\terr := r.db.WithContext(ctx).Where(model.$1{ID: id}).Find(&data).Error",
	"\treturn data, err",
	"}",
	"func (r $2RepoImpl) FindByID(ctx context.Context, id uuid.UUID) (*model.$1, error) {",
	"\tdata := new(model.$1)",
	"\terr := r.db.WithContext(ctx).Where(model.$1{ID: id}).Find(&data).Error",
	"\treturn data, err",
	"}",
	"",
	"func (r $2RepoImpl) UpdateByIDWithTx(ctx context.Context, tx *gorm.DB, id uuid.UUID, input *model.$1) (*model.$1, error) {",
	"\terr := tx.WithContext(ctx).Where(model.$1{ID: id}).Updates(&input).Error",
	"\treturn input, err",
	"}",
	"func (r $2RepoImpl) UpdateByID(ctx context.Context, id uuid.UUID, input *model.$1) (*model.$1, error) {",
	"\terr := r.db.WithContext(ctx).Where(model.$1{ID: id}).Updates(&input).Error",
	"\treturn input, err",
	"}",
	"",
	"func (r $2RepoImpl) DeleteByIDWithTx(ctx context.Context, tx *gorm.DB, id uuid.UUID) (*model.$1, error) {",
	"\tdata := new(model.$1)",
	"\ttx.WithContext(ctx).Where(model.$1{ID: id}).Find(&data)",
	"\terr := tx.WithContext(ctx).Delete(model.$1{ID: id}).Error",
	"\treturn data, err",
	"}",
	"func (r $2RepoImpl) DeleteByID(ctx context.Context, id uuid.UUID) (*model.$1, error) {",
	"\ttx := r.NewTx(ctx)",
	"\tdata := new(model.$1)",
	"\ttx.WithContext(ctx).Where(model.$1{ID: id}).Find(&data)",
	"\terr := tx.WithContext(ctx).Delete(model.$1{ID: id}).Error",
	"\tif err != nil {",
	"\t\ttx.WithContext(ctx).Rollback()",
	"\t\treturn nil, err",
	"\t}",
	"\ttx.WithContext(ctx).Commit()",
	"\treturn data, err",
"}",
		],
		"description": "Create CRUD Repository With Transaction"
	},

	"Create CRUD Service With Context": {
		"description": "Create CRUD Service With Context",
		"prefix": "sc",
		"body": [
			"// $1Service interface",
			"type $1Service interface {",
			"\tAll(context.Context) ([]*model.$1, error)",
			"\tCreate(context.Context, *model.$1) (*model.$1, error)",
			"\tFindByID(context.Context, uuid.UUID) (*model.$1, error)",
			"\tUpdateByID(context.Context, uuid.UUID, *model.$1) (*model.$1, error)",
			"\tDeleteByID(context.Context, uuid.UUID) (*model.$1, error)",
			"}",
			"",
			"// $2ServiceImpl struct",
			"type $2ServiceImpl struct {",
			"\trepo *repository.Repository",
			"}",
			"",
			"// New$1Service func",
			"func New$1Service(ioc di.Container) $1Service {",
			"\trepo := ioc.Get(\"repository\").(*repository.Repository)",
			"\treturn &$2ServiceImpl{",
			"\t\trepo,",
			"\t}",
			"}",
			"",
			"func (u $2ServiceImpl) All(ctx context.Context) ([]*model.$1, error) {",
			"\treturn u.repo.$1.All(ctx)",
			"}",
			"func (u $2ServiceImpl) Create(ctx context.Context, input *model.$1) (*model.$1, error) {",
			"\treturn u.repo.$1.Create(ctx, input)",
			"}",
			"func (u $2ServiceImpl) FindByID(ctx context.Context, id uuid.UUID) (*model.$1, error) {",
			"\treturn u.repo.$1.FindByID(ctx, id)",
			"}",
			"func (u $2ServiceImpl) UpdateByID(ctx context.Context, id uuid.UUID, input *model.$1) (*model.$1, error) {",
			"\treturn u.repo.$1.UpdateByID(ctx, id, input)",
			"}",
			"func (u $2ServiceImpl) DeleteByID(ctx context.Context, id uuid.UUID) (*model.$1, error) {",
			"\treturn u.repo.$1.DeleteByID(ctx, id)",
			"}",
		],
	},
}